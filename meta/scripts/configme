#!/bin/bash

# "configme" script.

#  Copyright (c) 2009-2010 Wind River Systems, Inc.

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

# Wrapper script to use existing tools to translate kernel
# config fragments into the pre-processed assembly of frags,
# and then finally a .config, and optionally an audit of that
# final .config

# Assumes you have a kernel clone, non-bare, with all BSPs/branches
# as local refs (i.e. not origin/*), i.e.
# 	git clone --bare git://myserver/my_kernel linux-2.6
# 	cd linux-2.6
#	mkdir .git ; mv * .git
#	git config core.bare false
#	git checkout -f meta
# Also assumes that current dir is in this linux git repo.

# Return values: zero if a ".config" was created, one otherwise.

CURRENT=`git branch |grep \*|sed 's/^\* //'`
SCRIPT_DIR=`pwd`/meta/scripts

PATH=$PATH:$SCRIPT_DIR
QUICK=1

usage()
{
cat << EOF

    configme [--audit] [--alldefconfig] [--allnoconfig] [--reconfig] [--o <outdir>] [target] [machine]

        audit: do an audit of final .config file
        reconfig: reconfigure an existing build
        target: name of the configuration target (branch)
        machine: specified if multiple machines use target
        outdir: name of the output directory
EOF
exit 1
}

get_branch_name()
{
    _meta_series=$1

    branchname=`git branch |grep \*|sed 's/^\* //'| sed 's%/base$%%'`

    echo $branchname
}

# This is factored out into a function because for a given branch,
# there may be more than one user (i.e. big endian, little endian,
# or BSPs that use the same branch but differ only in kernel configs)
run_board_config()
{
    # Can't set these until we've unwound the checkpoint and have meta data.
    KVER=`cat ./$META_DIR/cfg/kernel-*cache/kver|sed 's/^v//'`

    # Look for standard defines, with compatibility fallbacks
    KARCH=`grep KARCH $SCC | awk '{print $3}'`
    KPROFILE=`grep KMACHINE $SCC | awk '{print $3}'`
    KTYPE=`grep KTYPE $SCC | awk '{print $3}'`

    META=./$META_DIR/meta-series
    META_ALT=./$META_DIR/cfg/scratch/`basename $SCC .scc`-meta

    BUILD_DIR=$out_dir
    CFGFILE=$machine-$target-config-$KVER

    if [ "x$KARCH" == "x" ] ; then
	echo Couldnt determine architecture from file:
	echo -e \\t$SCC
	echo Assuming scc is not a valid BSP endpoint...
	return 1
    fi

    # Fixups to match KARCH onto kernel.org arch
    if [ $KARCH == "powerpc_64" ]; then
	KARCH=powerpc
    fi
    if [ $KARCH == "mips64" ]; then
	KARCH=mips
    fi

    if [ -z "$reconfig" ] && [ -d $BUILD_DIR ]; then
	echo Dir $BUILD_DIR already exists, remove/move
	echo it if you want to re-run this configuration utility.
	return 1
    fi

    if [ ! -d $BUILD_DIR ]; then
	mkdir $BUILD_DIR
	if [ $? != 0 ]; then
	    echo Failed to mkdir $BUILD_DIR for final .config file
	    return 1
	fi
    fi

    if [ ! -f $META ]; then
	if [ ! -f $META_ALT ]; then
		echo Failed to find meta series $META or $META_ALT
		return 1
	else
		META=$META_ALT
	fi
    fi

    kgit-meta -v -k $META
    if [ $? != 0 ]; then
	echo Error running the meta series for collecting config data
	return 1
    fi

    KTGT=`get_branch_name $META`
    mkdir -p ./$META_DIR/cfg/$KTGT
    if [ $? != 0 ]; then
	echo Failed to mkdir ./$META_DIR/cfg/$KTGT for config data
	return 1
    fi

    frags=`cat $META_DIR/cfg/$KTGT/config_frag.txt | sed 's%\(^.*$\)%'$META_DIR/cfg'\1%'`
    pre_config -l $META_DIR/cfg/$KTGT/ $frags > $META_DIR/cfg/$KTGT/config.log 2>&1

    # remove any old assembled debug fragments
    rm -f $BUILD_DIR/.tmp.config*

    merge_frags=`cat $META_DIR/cfg/$KTGT/config_frag.txt | sed 's%\(^.*$\)%'$META_DIR/cfg'\1.sanitized%'`
    ARCH=$KARCH O=$BUILD_DIR merge_config.sh $allnoconfig -d $merge_frags  \
                                      > $META_DIR/cfg/$KTGT/merge_log.txt 2>&1

    mv $BUILD_DIR/.tmp.config* $META_DIR/cfg/$KTGT/$CFGFILE
    if [ $? != 0 ]; then
     	echo creation of pre-processed config data failed
     	return 1
    fi

    # break the merge log down into parts that can be processed later
    grep -A2 "^Value of" $META_DIR/cfg/$KTGT/merge_log.txt > $META_DIR/cfg/$KTGT/redefinition.txt
    grep -A2 "^Value requested" $META_DIR/cfg/$KTGT/merge_log.txt > $META_DIR/cfg/$KTGT/mismatch.txt

    echo "[INFO] Pre-processed cfg file $CFGFILE created."

    # this is the 'old' way, kept as a double check
    if [ -n "$VERIFY_CONFIG" ]; then
    	make ARCH=$KARCH O=$BUILD_DIR \
     	    KBUILD_DEFCONFIG=../../../$META_DIR/cfg/$KTGT/$CFGFILE \
     	    defconfig > $META_DIR/cfg/$KTGT/config.log 2>&1

	if [ $? != 0 ]; then
   	    echo Kernel LKC processing of raw config data failed \($KARCH\)
     	    echo See $META_DIR/cfg/$KTGT/config.log for details.
     	    return 1
	fi
    fi
    echo "[INFO] processing of raw cfg data completed."
    if [ $QUICK -ne 1 ]; then
	kconf_check $CFGFILE /dev/null `pwd` $BUILD_DIR $KTGT
    fi

cat << EOF

********************************************************************************
  Configuration stored in $BUILD_DIR/.config
********************************************************************************

  To build with this kernel configuration, ensure a suitable toolchain
  is in your path for $KARCH, note its common command prefix, and do:

   make O=$BUILD_DIR ARCH=$KARCH \\
        CROSS_COMPILE=<cross-compile-prefix>

EOF
    return 0
}

#########################  Start here ##########################

if [ -z "$1" ]; then
	usage
	exit
fi

while [ $# -gt 0 ]; do
	case "$1" in
	    --help) 
		usage
		exit
		;;
	    --audit)
		QUICK=0
		;;
	    --reconfig)
		reconfig=t
		;;
	    --allnoconfig)
		allnoconfig=-n
		;;
	    --alldefconfig)
		allnoconfig=""
		;;
	    --output|-o|--o)
		out_dir=$2
		shift
		;;
	    -v) verbose=t
		;;
	    *) break
		;;
	esac
	shift
done

# an explicit target to configure may have been passed (whatever is left
# over). If something wasn't passed, we configure based on the current
# branch.
target=$1
machine=$2
if [ -z "$target" ]; then
    target=standard
fi

META_DIR=$KMETA
if [ -z "$META_DIR" ]; then
	META_DIR=meta
fi

if [ -e $META_DIR/top_tgt ]; then
    SCC_LIST=`cat $META_DIR/top_tgt`
else
    echo "[INFO] Finding machine description for $machine"

    define_tgt1=$machine
    define_tgt2=$target

    sccs_that_define=`find $META_DIR/cfg -name '*.scc' \
                        | xargs grep -l -e 'define.*' | sort | uniq`
    for scc in $sccs_that_define; do
    	score=0
    	max_score=0
    	for tgt in $define_tgt1 $define_tgt2 $define_tgt3; do
    	    if [ -n "$tgt" ]; then
    		max_score=`expr $max_score + 1`
    		f=`grep -l -e 'define.* '$tgt'$' $scc`
    		if [ -n "$f" ]; then
    		    score=`expr $score + 1`
    		fi
    	    fi
    	done
	
    	if [ $score -eq $max_score ]; then
    	    found_scc="$found_scc $scc"
    	fi
    done

    SCC_LIST=$found_scc
fi

if [ -z "$SCC_LIST" ]; then
	echo "Error: No machine description found for $machine"
	exit 1
fi

for SCC in $SCC_LIST ; do
	echo "[INFO] Configuring machine description: "`basename $SCC`
	run_board_config
	if [ $? != 0 ]; then
		echo config of $machine \(`basename $SCC`\) failed
		exit 1
	fi
done
exit 0
